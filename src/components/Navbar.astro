---
import { Image } from 'astro:assets';
import clsx from 'clsx';
import logo from '@/assets/shared/logo.svg';
import hamburger from '@/assets/shared/icon-hamburger.svg';
import closeIcon from '@/assets/shared/icon-close.svg';

const currentPath = Astro.url.pathname;
const base = import.meta.env.BASE_URL;
// Ensure base has trailing slash
const baseWithSlash = base.endsWith('/') ? base : `${base}/`;

const navItems = [
  { number: '00', name: 'HOME', path: baseWithSlash },
  { number: '01', name: 'DESTINATION', path: `${baseWithSlash}destination/` },
  { number: '02', name: 'CREW', path: `${baseWithSlash}crew/` },
  { number: '03', name: 'TECHNOLOGY', path: `${baseWithSlash}technology/` },
];

---

<nav 
  class="fixed top-0 left-0 right-0 z-50 flex items-center justify-between px-6 py-6 md:px-0 md:py-0 md:pl-10 lg:pl-14 lg:pt-10"
  transition:persist
  transition:animate="fade"
>
  <!-- Logo -->
  <a href={base} class="z-50">
    <Image src={logo} alt="Space Tourism Logo" class="h-10 w-10 md:h-12 md:w-12" fetchpriority="high" format='webp' />
  </a>

  <!-- Desktop Navigation -->
  <div class="hidden md:flex items-center flex-1 justify-end">
    <!-- Decorative line (only on large screens) -->
    <div class="hidden lg:block flex-1 h-px bg-white/25 -mr-8 z-10 max-w-[473px]"></div>
    
    <!-- Nav Links -->
    <ul class="flex gap-8 lg:gap-12 bg-white/5 md:backdrop-blur-2xl lg:backdrop-blur-2xl backdrop:blur-none px-12 lg:px-32 py-10">
      {navItems.map((item) => (
        <li>
          <a 
            href={item.path}
            class={clsx(
              "text-preset-8 text-white uppercase tracking-[2.7px] hover:border-b-2 hover:border-white/50 pb-10 transition-all relative group",
              currentPath === item.path && "border-b-2 border-white"
            )}
          >
            <span class="font-bold mr-3 hidden lg:inline">{item.number}</span>
            {item.name}
          </a>
        </li>
      ))}
    </ul>
  </div>

  <!-- Mobile Menu Button -->
  <button 
    id="mobile-menu-button"
    class="md:hidden z-50 w-6 h-6"
    aria-label="Toggle menu"
  >
    <Image id="hamburger-icon" src={hamburger} alt="Open menu" class="w-6 h-6" format='webp' />
  </button>

  <!-- Mobile Sidebar Menu -->
  <div 
    id="mobile-menu"
    class="fixed z-50 top-0 right-0 h-screen w-3/5 bg-white/5 backdrop-blur-lg transform translate-x-full transition-transform duration-300 ease-in-out md:hidden"
  >
    <!-- Close Button -->
    <button 
      id="mobile-close-button"
      class="absolute top-6 right-6 z-50"
      aria-label="Close menu"
    >
      <Image id="close-icon" src={closeIcon} alt="Close menu" class="w-6 h-6 hidden" format='webp' />
    </button>
    
    <ul class="flex flex-col gap-8 pt-32 pl-8 pr-0 w-full h-full">
      {navItems.map((item) => (
        <li class="w-full">
          <a 
            href={item.path}
            style="line-height: 16px;"
            class={clsx(
              "text-preset-8 text-white w-full block border-r-4 border-transparent hover:border-white/50 transition-all duration-200",
              currentPath === item.path && "border-white"
            )}
          >
            <span class="font-bold mr-3">{item.number}</span>
            {item.name}
          </a>
        </li>
      ))}
    </ul>
  </div>

  <!-- Mobile Menu Overlay -->
  <div 
    id="mobile-overlay"
    class="fixed inset-0 bg-black/50 opacity-0 pointer-events-none transition-opacity duration-300 md:hidden"
  ></div>
</nav>

<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const mobileOverlay = document.getElementById('mobile-overlay');
  const hamburgerIcon = document.getElementById('hamburger-icon');
  const closeIcon = document.getElementById('close-icon');

  let isMenuOpen = false;

  function toggleMenu() {
    isMenuOpen = !isMenuOpen;

    if (isMenuOpen) {
      // Open menu
      mobileMenu?.classList.remove('translate-x-full');
      mobileOverlay?.classList.remove('opacity-0', 'pointer-events-none');
      hamburgerIcon?.classList.add('hidden');
      closeIcon?.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    } else {
      // Close menu
      mobileMenu?.classList.add('translate-x-full');
      mobileOverlay?.classList.add('opacity-0', 'pointer-events-none');
      hamburgerIcon?.classList.remove('hidden');
      closeIcon?.classList.add('hidden');
      document.body.style.overflow = '';
    }
  }

  mobileMenuButton?.addEventListener('click', toggleMenu);
  mobileOverlay?.addEventListener('click', toggleMenu);
  
  // Add close button listener
  const mobileCloseButton = document.getElementById('mobile-close-button');
  mobileCloseButton?.addEventListener('click', toggleMenu);

  // Close menu when clicking on a link
  const mobileLinks = mobileMenu?.querySelectorAll('a');
  mobileLinks?.forEach(link => {
    link.addEventListener('click', () => {
      if (isMenuOpen) {
        toggleMenu();
      }
    });
  });

  // Handle page navigation - reset menu state
  document.addEventListener('astro:page-load', () => {
    isMenuOpen = false;
    mobileMenu?.classList.add('translate-x-full');
    mobileOverlay?.classList.add('opacity-0', 'pointer-events-none');
    hamburgerIcon?.classList.remove('hidden');
    closeIcon?.classList.add('hidden');
    document.body.style.overflow = '';
  });

  // Prevent transition on same page
  function preventSamePageTransitions() {
    // Get all navigation links
    const allLinks = document.querySelectorAll('nav a[href]');
    
    allLinks.forEach(link => {
      link.addEventListener('click', (e: Event) => {
        const target = e.target as HTMLAnchorElement;
        if (target.href) {
          const currentPath = window.location.pathname;
          const linkPath = new URL(target.href).pathname;
          
          // If clicking the same page, prevent navigation
          if (currentPath === linkPath) {
            e.preventDefault();
            e.stopPropagation();
          }
        }
      });
    });
  }
  
  // Update active navigation state
  function updateActiveNavigation() {
    const currentPath = window.location.pathname;
    const allNavLinks = document.querySelectorAll('nav a[href]');
    
    allNavLinks.forEach(link => {
      const linkPath = new URL((link as HTMLAnchorElement).href).pathname;
      const isActive = linkPath === currentPath;
      
      // Update desktop navigation
      if (link.classList.contains('hover:border-b-2')) {
        if (isActive) {
          link.classList.add('border-b-2', 'border-white');
        } else {
          link.classList.remove('border-b-2', 'border-white');
        }
      }
      
      // Update mobile navigation
      if (link.classList.contains('border-r-4')) {
        if (isActive) {
          link.classList.remove('border-transparent');
          link.classList.add('border-white');
        } else {
          link.classList.remove('border-white');
          link.classList.add('border-transparent');
        }
      }
    });
  }
  
  // Run on page load
  document.addEventListener('astro:page-load', () => {
    preventSamePageTransitions();
    updateActiveNavigation();
  });
  
  // Run immediately on first load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      preventSamePageTransitions();
      updateActiveNavigation();
    });
  } else {
    preventSamePageTransitions();
    updateActiveNavigation();
  }
</script>


